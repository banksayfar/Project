{"remainingRequest":"C:\\xampp\\htdocs\\bank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\bank\\node_modules\\mdbvue\\src\\components\\Navbar.vue?vue&type=style&index=0&id=2cb3bb51&scoped=true&lang=css&","dependencies":[{"path":"C:\\xampp\\htdocs\\bank\\node_modules\\mdbvue\\src\\components\\Navbar.vue","mtime":1536562766000},{"path":"C:\\xampp\\htdocs\\bank\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\bank\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\bank\\node_modules\\postcss-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\bank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535983143347},{"path":"C:\\xampp\\htdocs\\bank\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.scrolling-navbar {\r\n  transition: padding .5s;\r\n}\r\n.nav-item {\r\n  position: relative;\r\n}\r\n.navbar-toggler {\r\n  order: 1;\r\n}\r\n.navbar-collapse {\r\n  order: 2;\r\n}\r\n",{"version":3,"sources":["Navbar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Navbar.vue","sourceRoot":"node_modules\\mdbvue\\src\\components","sourcesContent":["<template>\r\n  <nav :class=\"navClass\" :is=\"tag\" :style=\"navStyles\">\r\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" :data-target=\"target\" aria-controls=\"navbarSupportedContent\"\r\n        aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <slot></slot>\r\n  </nav>\r\n</template>\r\n\r\n\r\n<script>\r\nimport classNames from 'classnames';\r\n\r\nconst Navbar = {\r\n  props: {\r\n    tag: {\r\n      type: String,\r\n      default: 'nav'\r\n    },\r\n    expand: {\r\n      type: String,\r\n      default: 'large'\r\n    },\r\n    dark: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    position: {\r\n      type: String\r\n    },\r\n    target: {\r\n      type: String,\r\n      default: '#navbarSupportedContent'\r\n    },\r\n    scrolling: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    color: {\r\n      type: String\r\n    },\r\n    transparent: {\r\n      type: Boolean\r\n    },\r\n    navStyle: {\r\n      type: String\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      scrolled: false,\r\n      toggleClicked : true,\r\n    };\r\n  },\r\n  computed: {\r\n    navClass() {\r\n      return  classNames(\r\n        'navbar',\r\n        this.dark ? 'navbar-dark' : 'navbar-light',\r\n        this.color && !this.transparent ? this.color + '-color' : '',\r\n        this.expand === 'small' ? 'navbar-expand-sm' :\r\n          this.expand === 'medium' ? 'navbar-expand-md' :\r\n            this.expand === 'large' ? 'navbar-expand-lg' : 'navbar-expand-lx',\r\n        this.position === 'top' ? 'fixed-top' :\r\n          this.position === 'bottom' ? 'fixed-bottom' : '',\r\n        this.scrolling ? 'scrolling-navbar' : ''\r\n      );\r\n    },\r\n    navStyles() {\r\n      return (\r\n        this.navStyle\r\n      );\r\n    }\r\n  },\r\n  methods: {\r\n    toggle() {\r\n      if (this.toggleClicked) {\r\n        this.collapse.classList.toggle('show-navbar');\r\n        this.collapse.classList.remove('hide-navbar');\r\n        this.collapse.classList.toggle('collapse');\r\n        this.collapse.style.overflow = 'hidden';\r\n        this.collapseOverflow = setTimeout(() => {\r\n          this.collapse.style.overflow = 'initial';\r\n        }, 300);\r\n        this.toggleClicked = false;\r\n      } else {\r\n        this.collapse.classList.add('hide-navbar');\r\n        this.collapse.classList.toggle('show-navbar');\r\n        this.collapse.style.overflow = 'hidden';\r\n        this.collapseOverflow = setTimeout(() => {\r\n          this.collapse.classList.toggle('collapse');\r\n          this.collapse.style.overflow = 'initial';\r\n        }, 300);\r\n        this.toggleClicked = true;\r\n      }\r\n    },\r\n    close() {\r\n      this.collapse.classList.add('hide-navbar');\r\n      this.collapse.classList.remove('show-navbar');\r\n      this.collapse.style.overflow = 'hidden';\r\n      this.collapseOverflow = setTimeout(() => {\r\n        this.collapse.classList.add('collapse');\r\n        this.collapse.style.overflow = 'initial';\r\n      }, 300);\r\n      this.toggleClicked = true;\r\n    },\r\n    handleScroll() {\r\n      if (this.scrolling) {\r\n        if (window.scrollY > 100 && this.scrolled === false) {\r\n          this.$el.style.paddingTop = 5 + 'px';\r\n          this.$el.style.paddingBottom = 5 + 'px';\r\n          if (this.transparent) this.$el.classList.add(`${this.color}-color`);\r\n          this.scrolled = true;\r\n        } else if (window.scrollY < 100 && this.scrolled === true) {\r\n          this.$el.style.paddingTop = 12 + 'px';\r\n          this.$el.style.paddingBottom = 12 + 'px';\r\n          if (this.transparent) this.$el.classList.remove(`${this.color}-color`);\r\n          this.scrolled = false;\r\n        }\r\n      }\r\n    },\r\n    onClick(e) {\r\n      if (e.target.classList.contains('navbar-toggler') || e.target.parentNode.classList.contains('navbar-toggler')) {\r\n        this.toggle();\r\n      } else if (this.toggleClicked === false) {\r\n        let target = e.target;\r\n        let body = document.getElementsByTagName('body')[0];\r\n        if (!target.classList.contains('navbar-link')) {\r\n          while (target !== body) {\r\n            if (target.classList.contains('navbar')) {\r\n              return;\r\n            }\r\n            target = target.parentNode;\r\n          }\r\n        }\r\n        this.close();\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    document.addEventListener('click', this.onClick);\r\n    this.collapse = this.$el.children.navbarSupportedContent;\r\n    this.collapse.classList.add('collapse');\r\n  },\r\n  created() {\r\n    window.addEventListener('scroll', this.handleScroll);\r\n  },\r\n  destroyed() {\r\n    document.removeEventListener('click', this.onClick);\r\n    window.removeEventListener('scroll', this.handleScroll);\r\n  }\r\n};\r\n\r\nexport default Navbar;\r\nexport { Navbar as mdbNavbar };\r\n</script>\r\n\r\n<style scoped>\r\n.scrolling-navbar {\r\n  transition: padding .5s;\r\n}\r\n.nav-item {\r\n  position: relative;\r\n}\r\n.navbar-toggler {\r\n  order: 1;\r\n}\r\n.navbar-collapse {\r\n  order: 2;\r\n}\r\n</style>\r\n"]}]}