{"remainingRequest":"C:\\xampp\\htdocs\\bank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\bank\\node_modules\\mdbvue\\src\\components\\Input.vue?vue&type=style&index=0&id=4ec0e799&scoped=true&lang=css&","dependencies":[{"path":"C:\\xampp\\htdocs\\bank\\node_modules\\mdbvue\\src\\components\\Input.vue","mtime":1536562766000},{"path":"C:\\xampp\\htdocs\\bank\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\bank\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\bank\\node_modules\\postcss-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\bank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535983143347},{"path":"C:\\xampp\\htdocs\\bank\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.navbar .md-form {\r\n  margin-top: 0;\r\n  margin-bottom: 0;\r\n}\r\n",{"version":3,"sources":["Input.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuNA;AACA;AACA;AACA","file":"Input.vue","sourceRoot":"node_modules\\mdbvue\\src\\components","sourcesContent":["<template>\r\n  <div :class=\"wrapperClass\">\r\n    <i v-if=\"icon\" :class=\"iconClasses\"/>\r\n    <label v-if=\"label && basic\" :class=\"labelClass\" @click=\"focus\" ref=\"label\" :for=\"id\">{{label}}</label>\r\n    <input \r\n      :is=\"tag\"\r\n      :id=\"id\"\r\n      :class=\"className\"\r\n      :type=\"type\"\r\n      :placeholder=\"placeholder\"\r\n      :disabled=\"disabled\"\r\n      @focus=\"focus\"\r\n      @blur=\"blur\"\r\n      @click=\"wave\"\r\n      @change=\"onChange\"\r\n      ref=\"input\"\r\n      @input=\"onChange\"\r\n      :name=\"name\"\r\n      :required=\"required\"\r\n      :checked=\"innerChecked\"\r\n      :value=\"innerValue\"\r\n    />  \r\n    <label v-if=\"label && !basic\" :class=\"labelClass\" @click=\"focus\" ref=\"label\" :for=\"id\">{{label}}</label>\r\n    <slot></slot>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport classNames from 'classnames';\r\nimport waves from '../mixins/waves';\r\n\r\nconst Input = {\r\n  props: {\r\n    basic: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    name: {\r\n      type: String\r\n    },\r\n    required: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    tag: {\r\n      type: String,\r\n      default: \"input\"\r\n    },\r\n    type: {\r\n      type: String,\r\n      default: \"text\"\r\n    },\r\n    id: {\r\n      type: String\r\n    },\r\n    label: {\r\n      type: String\r\n    },\r\n    filled: {\r\n      type: Boolean\r\n    },\r\n    icon: {\r\n      type: String,\r\n    },\r\n    placeholder: {\r\n      type: String\r\n    },\r\n    size: {\r\n      type: String\r\n    },\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    checked: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    navInput: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    gap: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    waves: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    wavesFixed: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    value: {\r\n      type: [String, Number],\r\n      default: ''\r\n    },\r\n    labelColor: {\r\n      type: String\r\n    },\r\n    iconClass: {\r\n      type: String\r\n    },\r\n    inline: {\r\n      type: Boolean\r\n    },\r\n    successMsg: {\r\n      type: String\r\n    },\r\n    errorMsg: {\r\n      type: String\r\n    },\r\n    valid: {\r\n      type: Boolean\r\n    },\r\n    invalid: {\r\n      type: Boolean\r\n    },\r\n    active: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      innerValue: this.value,\r\n      innerRadio: '',\r\n      isTouched: this.active,\r\n      innerChecked: this.checked\r\n    };\r\n  },\r\n  computed: {\r\n    className() {\r\n      return classNames(\r\n        'form-control',\r\n        {\r\n          'validate valid': this.valid,\r\n          'validate invalid': this.invalid,\r\n          'filled-in': this.filled,\r\n          'with-gap': this.gap\r\n        },\r\n        this.type === 'checkbox' ? this.gap ? false : 'form-check-input' : false,\r\n        this.type === 'radio' ? 'form-check-input' : false\r\n      );\r\n    },\r\n    wrapperClass() {\r\n      if (!this.basic) {\r\n        return classNames(\r\n          (this.type === 'checkbox' || this.type === 'radio') && this.inline ?\r\n            'form-check' : (this.type === 'checkbox' || this.type === 'radio') ? 'form-check my-3' : 'md-form',\r\n          this.size && 'form-' + this.size,\r\n          this.waves && 'ripple-parent'\r\n        );\r\n      }\r\n\r\n      return null;\r\n    },\r\n    iconClasses(){\r\n      return classNames(\r\n        'prefix fa fa-' + this.icon,\r\n        this.isTouched && 'active',\r\n        this.iconClass\r\n      );\r\n    },\r\n    labelClass() {\r\n      return classNames(\r\n        {\r\n          'active': (this.placeholder || this.isTouched || this.innerValue !==''),\r\n          'disabled': this.disabled,\r\n          'form-check-label mr-5': (this.type === 'checkbox' || this.type === 'radio')\r\n        },\r\n        this.labelColor && 'text-' + this.labelColor\r\n      );\r\n    }\r\n  },\r\n  methods: {\r\n    focus(e) {\r\n      this.isTouched = true;\r\n      if (!this.disabled) {\r\n        this.$refs.input.focus();\r\n      }\r\n      // styles for navbar input\r\n      if (this.navInput) {\r\n        this.$el.firstElementChild.style.borderColor = \"transparent\";\r\n        this.$el.firstElementChild.style.boxShadow = \"none\";\r\n      }\r\n    },\r\n    blur(e) {\r\n      this.isTouched = false;\r\n      // styles for navbar input\r\n      if (this.navInput) {\r\n        this.$el.firstElementChild.style.borderColor = \"#fff\";\r\n      }\r\n    },\r\n    onChange(e) {\r\n      if (this.type == \"text\" || this.type == \"email\" || this.type == \"password\" || this.type == \"radio\") {\r\n        this.$emit('input', e.target.value);\r\n        this.innerValue = e.target.value;\r\n      }\r\n      if (this.type == \"checkbox\") {\r\n        this.$emit('change', e.target.checked);\r\n        this.innerChecked = e.target.checked;\r\n      }\r\n      this.$forceUpdate();\r\n    },\r\n  },\r\n  mixins: [waves]\r\n};\r\n\r\nexport default Input;\r\nexport { Input as mdbInput };\r\n</script>\r\n\r\n<style scoped>\r\n.navbar .md-form {\r\n  margin-top: 0;\r\n  margin-bottom: 0;\r\n}\r\n</style>\r\n"]}]}