{"remainingRequest":"C:\\xampp\\htdocs\\bank\\node_modules\\babel-loader\\lib\\index.js!C:\\xampp\\htdocs\\bank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\bank\\node_modules\\mdbvue\\src\\components\\Input.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xampp\\htdocs\\bank\\node_modules\\mdbvue\\src\\components\\Input.vue","mtime":1536562766000},{"path":"C:\\xampp\\htdocs\\bank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535983143347},{"path":"C:\\xampp\\htdocs\\bank\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\bank\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport classNames from 'classnames';\nimport waves from '../mixins/waves';\nvar Input = {\n  props: {\n    basic: {\n      type: Boolean,\n      default: false\n    },\n    name: {\n      type: String\n    },\n    required: {\n      type: Boolean,\n      default: false\n    },\n    tag: {\n      type: String,\n      default: \"input\"\n    },\n    type: {\n      type: String,\n      default: \"text\"\n    },\n    id: {\n      type: String\n    },\n    label: {\n      type: String\n    },\n    filled: {\n      type: Boolean\n    },\n    icon: {\n      type: String\n    },\n    placeholder: {\n      type: String\n    },\n    size: {\n      type: String\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    checked: {\n      type: Boolean,\n      default: false\n    },\n    navInput: {\n      type: Boolean,\n      default: false\n    },\n    gap: {\n      type: Boolean,\n      default: false\n    },\n    waves: {\n      type: Boolean,\n      default: false\n    },\n    wavesFixed: {\n      type: Boolean,\n      default: false\n    },\n    value: {\n      type: [String, Number],\n      default: ''\n    },\n    labelColor: {\n      type: String\n    },\n    iconClass: {\n      type: String\n    },\n    inline: {\n      type: Boolean\n    },\n    successMsg: {\n      type: String\n    },\n    errorMsg: {\n      type: String\n    },\n    valid: {\n      type: Boolean\n    },\n    invalid: {\n      type: Boolean\n    },\n    active: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      innerValue: this.value,\n      innerRadio: '',\n      isTouched: this.active,\n      innerChecked: this.checked\n    };\n  },\n  computed: {\n    className: function className() {\n      return classNames('form-control', {\n        'validate valid': this.valid,\n        'validate invalid': this.invalid,\n        'filled-in': this.filled,\n        'with-gap': this.gap\n      }, this.type === 'checkbox' ? this.gap ? false : 'form-check-input' : false, this.type === 'radio' ? 'form-check-input' : false);\n    },\n    wrapperClass: function wrapperClass() {\n      if (!this.basic) {\n        return classNames((this.type === 'checkbox' || this.type === 'radio') && this.inline ? 'form-check' : this.type === 'checkbox' || this.type === 'radio' ? 'form-check my-3' : 'md-form', this.size && 'form-' + this.size, this.waves && 'ripple-parent');\n      }\n\n      return null;\n    },\n    iconClasses: function iconClasses() {\n      return classNames('prefix fa fa-' + this.icon, this.isTouched && 'active', this.iconClass);\n    },\n    labelClass: function labelClass() {\n      return classNames({\n        'active': this.placeholder || this.isTouched || this.innerValue !== '',\n        'disabled': this.disabled,\n        'form-check-label mr-5': this.type === 'checkbox' || this.type === 'radio'\n      }, this.labelColor && 'text-' + this.labelColor);\n    }\n  },\n  methods: {\n    focus: function focus(e) {\n      this.isTouched = true;\n\n      if (!this.disabled) {\n        this.$refs.input.focus();\n      } // styles for navbar input\n\n\n      if (this.navInput) {\n        this.$el.firstElementChild.style.borderColor = \"transparent\";\n        this.$el.firstElementChild.style.boxShadow = \"none\";\n      }\n    },\n    blur: function blur(e) {\n      this.isTouched = false; // styles for navbar input\n\n      if (this.navInput) {\n        this.$el.firstElementChild.style.borderColor = \"#fff\";\n      }\n    },\n    onChange: function onChange(e) {\n      if (this.type == \"text\" || this.type == \"email\" || this.type == \"password\" || this.type == \"radio\") {\n        this.$emit('input', e.target.value);\n        this.innerValue = e.target.value;\n      }\n\n      if (this.type == \"checkbox\") {\n        this.$emit('change', e.target.checked);\n        this.innerChecked = e.target.checked;\n      }\n\n      this.$forceUpdate();\n    }\n  },\n  mixins: [waves]\n};\nexport default Input;\nexport { Input as mdbInput };",{"version":3,"sources":["Input.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div :class=\"wrapperClass\">\r\n    <i v-if=\"icon\" :class=\"iconClasses\"/>\r\n    <label v-if=\"label && basic\" :class=\"labelClass\" @click=\"focus\" ref=\"label\" :for=\"id\">{{label}}</label>\r\n    <input \r\n      :is=\"tag\"\r\n      :id=\"id\"\r\n      :class=\"className\"\r\n      :type=\"type\"\r\n      :placeholder=\"placeholder\"\r\n      :disabled=\"disabled\"\r\n      @focus=\"focus\"\r\n      @blur=\"blur\"\r\n      @click=\"wave\"\r\n      @change=\"onChange\"\r\n      ref=\"input\"\r\n      @input=\"onChange\"\r\n      :name=\"name\"\r\n      :required=\"required\"\r\n      :checked=\"innerChecked\"\r\n      :value=\"innerValue\"\r\n    />  \r\n    <label v-if=\"label && !basic\" :class=\"labelClass\" @click=\"focus\" ref=\"label\" :for=\"id\">{{label}}</label>\r\n    <slot></slot>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport classNames from 'classnames';\r\nimport waves from '../mixins/waves';\r\n\r\nconst Input = {\r\n  props: {\r\n    basic: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    name: {\r\n      type: String\r\n    },\r\n    required: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    tag: {\r\n      type: String,\r\n      default: \"input\"\r\n    },\r\n    type: {\r\n      type: String,\r\n      default: \"text\"\r\n    },\r\n    id: {\r\n      type: String\r\n    },\r\n    label: {\r\n      type: String\r\n    },\r\n    filled: {\r\n      type: Boolean\r\n    },\r\n    icon: {\r\n      type: String,\r\n    },\r\n    placeholder: {\r\n      type: String\r\n    },\r\n    size: {\r\n      type: String\r\n    },\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    checked: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    navInput: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    gap: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    waves: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    wavesFixed: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    value: {\r\n      type: [String, Number],\r\n      default: ''\r\n    },\r\n    labelColor: {\r\n      type: String\r\n    },\r\n    iconClass: {\r\n      type: String\r\n    },\r\n    inline: {\r\n      type: Boolean\r\n    },\r\n    successMsg: {\r\n      type: String\r\n    },\r\n    errorMsg: {\r\n      type: String\r\n    },\r\n    valid: {\r\n      type: Boolean\r\n    },\r\n    invalid: {\r\n      type: Boolean\r\n    },\r\n    active: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      innerValue: this.value,\r\n      innerRadio: '',\r\n      isTouched: this.active,\r\n      innerChecked: this.checked\r\n    };\r\n  },\r\n  computed: {\r\n    className() {\r\n      return classNames(\r\n        'form-control',\r\n        {\r\n          'validate valid': this.valid,\r\n          'validate invalid': this.invalid,\r\n          'filled-in': this.filled,\r\n          'with-gap': this.gap\r\n        },\r\n        this.type === 'checkbox' ? this.gap ? false : 'form-check-input' : false,\r\n        this.type === 'radio' ? 'form-check-input' : false\r\n      );\r\n    },\r\n    wrapperClass() {\r\n      if (!this.basic) {\r\n        return classNames(\r\n          (this.type === 'checkbox' || this.type === 'radio') && this.inline ?\r\n            'form-check' : (this.type === 'checkbox' || this.type === 'radio') ? 'form-check my-3' : 'md-form',\r\n          this.size && 'form-' + this.size,\r\n          this.waves && 'ripple-parent'\r\n        );\r\n      }\r\n\r\n      return null;\r\n    },\r\n    iconClasses(){\r\n      return classNames(\r\n        'prefix fa fa-' + this.icon,\r\n        this.isTouched && 'active',\r\n        this.iconClass\r\n      );\r\n    },\r\n    labelClass() {\r\n      return classNames(\r\n        {\r\n          'active': (this.placeholder || this.isTouched || this.innerValue !==''),\r\n          'disabled': this.disabled,\r\n          'form-check-label mr-5': (this.type === 'checkbox' || this.type === 'radio')\r\n        },\r\n        this.labelColor && 'text-' + this.labelColor\r\n      );\r\n    }\r\n  },\r\n  methods: {\r\n    focus(e) {\r\n      this.isTouched = true;\r\n      if (!this.disabled) {\r\n        this.$refs.input.focus();\r\n      }\r\n      // styles for navbar input\r\n      if (this.navInput) {\r\n        this.$el.firstElementChild.style.borderColor = \"transparent\";\r\n        this.$el.firstElementChild.style.boxShadow = \"none\";\r\n      }\r\n    },\r\n    blur(e) {\r\n      this.isTouched = false;\r\n      // styles for navbar input\r\n      if (this.navInput) {\r\n        this.$el.firstElementChild.style.borderColor = \"#fff\";\r\n      }\r\n    },\r\n    onChange(e) {\r\n      if (this.type == \"text\" || this.type == \"email\" || this.type == \"password\" || this.type == \"radio\") {\r\n        this.$emit('input', e.target.value);\r\n        this.innerValue = e.target.value;\r\n      }\r\n      if (this.type == \"checkbox\") {\r\n        this.$emit('change', e.target.checked);\r\n        this.innerChecked = e.target.checked;\r\n      }\r\n      this.$forceUpdate();\r\n    },\r\n  },\r\n  mixins: [waves]\r\n};\r\n\r\nexport default Input;\r\nexport { Input as mdbInput };\r\n</script>\r\n\r\n<style scoped>\r\n.navbar .md-form {\r\n  margin-top: 0;\r\n  margin-bottom: 0;\r\n}\r\n</style>\r\n"],"sourceRoot":"node_modules\\mdbvue\\src\\components"}]}