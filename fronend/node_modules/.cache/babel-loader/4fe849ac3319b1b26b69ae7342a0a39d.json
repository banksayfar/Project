{"remainingRequest":"C:\\xampp\\htdocs\\bank\\node_modules\\babel-loader\\lib\\index.js!C:\\xampp\\htdocs\\bank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\bank\\node_modules\\mdbvue\\src\\components\\Navbar.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xampp\\htdocs\\bank\\node_modules\\mdbvue\\src\\components\\Navbar.vue","mtime":1536562766000},{"path":"C:\\xampp\\htdocs\\bank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535983143347},{"path":"C:\\xampp\\htdocs\\bank\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\bank\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport classNames from 'classnames';\nvar Navbar = {\n  props: {\n    tag: {\n      type: String,\n      default: 'nav'\n    },\n    expand: {\n      type: String,\n      default: 'large'\n    },\n    dark: {\n      type: Boolean,\n      default: false\n    },\n    position: {\n      type: String\n    },\n    target: {\n      type: String,\n      default: '#navbarSupportedContent'\n    },\n    scrolling: {\n      type: Boolean,\n      default: false\n    },\n    color: {\n      type: String\n    },\n    transparent: {\n      type: Boolean\n    },\n    navStyle: {\n      type: String\n    }\n  },\n  data: function data() {\n    return {\n      scrolled: false,\n      toggleClicked: true\n    };\n  },\n  computed: {\n    navClass: function navClass() {\n      return classNames('navbar', this.dark ? 'navbar-dark' : 'navbar-light', this.color && !this.transparent ? this.color + '-color' : '', this.expand === 'small' ? 'navbar-expand-sm' : this.expand === 'medium' ? 'navbar-expand-md' : this.expand === 'large' ? 'navbar-expand-lg' : 'navbar-expand-lx', this.position === 'top' ? 'fixed-top' : this.position === 'bottom' ? 'fixed-bottom' : '', this.scrolling ? 'scrolling-navbar' : '');\n    },\n    navStyles: function navStyles() {\n      return this.navStyle;\n    }\n  },\n  methods: {\n    toggle: function toggle() {\n      var _this = this;\n\n      if (this.toggleClicked) {\n        this.collapse.classList.toggle('show-navbar');\n        this.collapse.classList.remove('hide-navbar');\n        this.collapse.classList.toggle('collapse');\n        this.collapse.style.overflow = 'hidden';\n        this.collapseOverflow = setTimeout(function () {\n          _this.collapse.style.overflow = 'initial';\n        }, 300);\n        this.toggleClicked = false;\n      } else {\n        this.collapse.classList.add('hide-navbar');\n        this.collapse.classList.toggle('show-navbar');\n        this.collapse.style.overflow = 'hidden';\n        this.collapseOverflow = setTimeout(function () {\n          _this.collapse.classList.toggle('collapse');\n\n          _this.collapse.style.overflow = 'initial';\n        }, 300);\n        this.toggleClicked = true;\n      }\n    },\n    close: function close() {\n      var _this2 = this;\n\n      this.collapse.classList.add('hide-navbar');\n      this.collapse.classList.remove('show-navbar');\n      this.collapse.style.overflow = 'hidden';\n      this.collapseOverflow = setTimeout(function () {\n        _this2.collapse.classList.add('collapse');\n\n        _this2.collapse.style.overflow = 'initial';\n      }, 300);\n      this.toggleClicked = true;\n    },\n    handleScroll: function handleScroll() {\n      if (this.scrolling) {\n        if (window.scrollY > 100 && this.scrolled === false) {\n          this.$el.style.paddingTop = 5 + 'px';\n          this.$el.style.paddingBottom = 5 + 'px';\n          if (this.transparent) this.$el.classList.add(\"\".concat(this.color, \"-color\"));\n          this.scrolled = true;\n        } else if (window.scrollY < 100 && this.scrolled === true) {\n          this.$el.style.paddingTop = 12 + 'px';\n          this.$el.style.paddingBottom = 12 + 'px';\n          if (this.transparent) this.$el.classList.remove(\"\".concat(this.color, \"-color\"));\n          this.scrolled = false;\n        }\n      }\n    },\n    onClick: function onClick(e) {\n      if (e.target.classList.contains('navbar-toggler') || e.target.parentNode.classList.contains('navbar-toggler')) {\n        this.toggle();\n      } else if (this.toggleClicked === false) {\n        var target = e.target;\n        var body = document.getElementsByTagName('body')[0];\n\n        if (!target.classList.contains('navbar-link')) {\n          while (target !== body) {\n            if (target.classList.contains('navbar')) {\n              return;\n            }\n\n            target = target.parentNode;\n          }\n        }\n\n        this.close();\n      }\n    }\n  },\n  mounted: function mounted() {\n    document.addEventListener('click', this.onClick);\n    this.collapse = this.$el.children.navbarSupportedContent;\n    this.collapse.classList.add('collapse');\n  },\n  created: function created() {\n    window.addEventListener('scroll', this.handleScroll);\n  },\n  destroyed: function destroyed() {\n    document.removeEventListener('click', this.onClick);\n    window.removeEventListener('scroll', this.handleScroll);\n  }\n};\nexport default Navbar;\nexport { Navbar as mdbNavbar };",{"version":3,"sources":["Navbar.vue"],"names":[],"mappings":";;;;;;;;;;;AAYA,OAAA,UAAA,MAAA,YAAA;AAEA,IAAA,SAAA;AACA,SAAA;AACA,SAAA;AACA,YAAA,MADA;AAEA,eAAA;AAFA,KADA;AAKA,YAAA;AACA,YAAA,MADA;AAEA,eAAA;AAFA,KALA;AASA,UAAA;AACA,YAAA,OADA;AAEA,eAAA;AAFA,KATA;AAaA,cAAA;AACA,YAAA;AADA,KAbA;AAgBA,YAAA;AACA,YAAA,MADA;AAEA,eAAA;AAFA,KAhBA;AAoBA,eAAA;AACA,YAAA,OADA;AAEA,eAAA;AAFA,KApBA;AAwBA,WAAA;AACA,YAAA;AADA,KAxBA;AA2BA,iBAAA;AACA,YAAA;AADA,KA3BA;AA8BA,cAAA;AACA,YAAA;AADA;AA9BA,GADA;AAmCA,MAnCA,kBAmCA;AACA,WAAA;AACA,gBAAA,KADA;AAEA,qBAAA;AAFA,KAAA;AAIA,GAxCA;AAyCA,YAAA;AACA,YADA,sBACA;AACA,aAAA,WACA,QADA,EAEA,KAAA,IAAA,GAAA,aAAA,GAAA,cAFA,EAGA,KAAA,KAAA,IAAA,CAAA,KAAA,WAAA,GAAA,KAAA,KAAA,GAAA,QAAA,GAAA,EAHA,EAIA,KAAA,MAAA,KAAA,OAAA,GAAA,kBAAA,GACA,KAAA,MAAA,KAAA,QAAA,GAAA,kBAAA,GACA,KAAA,MAAA,KAAA,OAAA,GAAA,kBAAA,GAAA,kBANA,EAOA,KAAA,QAAA,KAAA,KAAA,GAAA,WAAA,GACA,KAAA,QAAA,KAAA,QAAA,GAAA,cAAA,GAAA,EARA,EASA,KAAA,SAAA,GAAA,kBAAA,GAAA,EATA,CAAA;AAWA,KAbA;AAcA,aAdA,uBAcA;AACA,aACA,KAAA,QADA;AAGA;AAlBA,GAzCA;AA6DA,WAAA;AACA,UADA,oBACA;AAAA;;AACA,UAAA,KAAA,aAAA,EAAA;AACA,aAAA,QAAA,CAAA,SAAA,CAAA,MAAA,CAAA,aAAA;AACA,aAAA,QAAA,CAAA,SAAA,CAAA,MAAA,CAAA,aAAA;AACA,aAAA,QAAA,CAAA,SAAA,CAAA,MAAA,CAAA,UAAA;AACA,aAAA,QAAA,CAAA,KAAA,CAAA,QAAA,GAAA,QAAA;AACA,aAAA,gBAAA,GAAA,WAAA,YAAA;AACA,gBAAA,QAAA,CAAA,KAAA,CAAA,QAAA,GAAA,SAAA;AACA,SAFA,EAEA,GAFA,CAAA;AAGA,aAAA,aAAA,GAAA,KAAA;AACA,OATA,MASA;AACA,aAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,aAAA;AACA,aAAA,QAAA,CAAA,SAAA,CAAA,MAAA,CAAA,aAAA;AACA,aAAA,QAAA,CAAA,KAAA,CAAA,QAAA,GAAA,QAAA;AACA,aAAA,gBAAA,GAAA,WAAA,YAAA;AACA,gBAAA,QAAA,CAAA,SAAA,CAAA,MAAA,CAAA,UAAA;;AACA,gBAAA,QAAA,CAAA,KAAA,CAAA,QAAA,GAAA,SAAA;AACA,SAHA,EAGA,GAHA,CAAA;AAIA,aAAA,aAAA,GAAA,IAAA;AACA;AACA,KArBA;AAsBA,SAtBA,mBAsBA;AAAA;;AACA,WAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,aAAA;AACA,WAAA,QAAA,CAAA,SAAA,CAAA,MAAA,CAAA,aAAA;AACA,WAAA,QAAA,CAAA,KAAA,CAAA,QAAA,GAAA,QAAA;AACA,WAAA,gBAAA,GAAA,WAAA,YAAA;AACA,eAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,UAAA;;AACA,eAAA,QAAA,CAAA,KAAA,CAAA,QAAA,GAAA,SAAA;AACA,OAHA,EAGA,GAHA,CAAA;AAIA,WAAA,aAAA,GAAA,IAAA;AACA,KA/BA;AAgCA,gBAhCA,0BAgCA;AACA,UAAA,KAAA,SAAA,EAAA;AACA,YAAA,OAAA,OAAA,GAAA,GAAA,IAAA,KAAA,QAAA,KAAA,KAAA,EAAA;AACA,eAAA,GAAA,CAAA,KAAA,CAAA,UAAA,GAAA,IAAA,IAAA;AACA,eAAA,GAAA,CAAA,KAAA,CAAA,aAAA,GAAA,IAAA,IAAA;AACA,cAAA,KAAA,WAAA,EAAA,KAAA,GAAA,CAAA,SAAA,CAAA,GAAA,WAAA,KAAA,KAAA;AACA,eAAA,QAAA,GAAA,IAAA;AACA,SALA,MAKA,IAAA,OAAA,OAAA,GAAA,GAAA,IAAA,KAAA,QAAA,KAAA,IAAA,EAAA;AACA,eAAA,GAAA,CAAA,KAAA,CAAA,UAAA,GAAA,KAAA,IAAA;AACA,eAAA,GAAA,CAAA,KAAA,CAAA,aAAA,GAAA,KAAA,IAAA;AACA,cAAA,KAAA,WAAA,EAAA,KAAA,GAAA,CAAA,SAAA,CAAA,MAAA,WAAA,KAAA,KAAA;AACA,eAAA,QAAA,GAAA,KAAA;AACA;AACA;AACA,KA9CA;AA+CA,WA/CA,mBA+CA,CA/CA,EA+CA;AACA,UAAA,EAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,gBAAA,KAAA,EAAA,MAAA,CAAA,UAAA,CAAA,SAAA,CAAA,QAAA,CAAA,gBAAA,CAAA,EAAA;AACA,aAAA,MAAA;AACA,OAFA,MAEA,IAAA,KAAA,aAAA,KAAA,KAAA,EAAA;AACA,YAAA,SAAA,EAAA,MAAA;AACA,YAAA,OAAA,SAAA,oBAAA,CAAA,MAAA,EAAA,CAAA,CAAA;;AACA,YAAA,CAAA,OAAA,SAAA,CAAA,QAAA,CAAA,aAAA,CAAA,EAAA;AACA,iBAAA,WAAA,IAAA,EAAA;AACA,gBAAA,OAAA,SAAA,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA;AACA;AACA;;AACA,qBAAA,OAAA,UAAA;AACA;AACA;;AACA,aAAA,KAAA;AACA;AACA;AA/DA,GA7DA;AA8HA,SA9HA,qBA8HA;AACA,aAAA,gBAAA,CAAA,OAAA,EAAA,KAAA,OAAA;AACA,SAAA,QAAA,GAAA,KAAA,GAAA,CAAA,QAAA,CAAA,sBAAA;AACA,SAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,UAAA;AACA,GAlIA;AAmIA,SAnIA,qBAmIA;AACA,WAAA,gBAAA,CAAA,QAAA,EAAA,KAAA,YAAA;AACA,GArIA;AAsIA,WAtIA,uBAsIA;AACA,aAAA,mBAAA,CAAA,OAAA,EAAA,KAAA,OAAA;AACA,WAAA,mBAAA,CAAA,QAAA,EAAA,KAAA,YAAA;AACA;AAzIA,CAAA;AA4IA,eAAA,MAAA;AACA,SAAA,UAAA,SAAA","sourcesContent":["<template>\r\n  <nav :class=\"navClass\" :is=\"tag\" :style=\"navStyles\">\r\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" :data-target=\"target\" aria-controls=\"navbarSupportedContent\"\r\n        aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <slot></slot>\r\n  </nav>\r\n</template>\r\n\r\n\r\n<script>\r\nimport classNames from 'classnames';\r\n\r\nconst Navbar = {\r\n  props: {\r\n    tag: {\r\n      type: String,\r\n      default: 'nav'\r\n    },\r\n    expand: {\r\n      type: String,\r\n      default: 'large'\r\n    },\r\n    dark: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    position: {\r\n      type: String\r\n    },\r\n    target: {\r\n      type: String,\r\n      default: '#navbarSupportedContent'\r\n    },\r\n    scrolling: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    color: {\r\n      type: String\r\n    },\r\n    transparent: {\r\n      type: Boolean\r\n    },\r\n    navStyle: {\r\n      type: String\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      scrolled: false,\r\n      toggleClicked : true,\r\n    };\r\n  },\r\n  computed: {\r\n    navClass() {\r\n      return  classNames(\r\n        'navbar',\r\n        this.dark ? 'navbar-dark' : 'navbar-light',\r\n        this.color && !this.transparent ? this.color + '-color' : '',\r\n        this.expand === 'small' ? 'navbar-expand-sm' :\r\n          this.expand === 'medium' ? 'navbar-expand-md' :\r\n            this.expand === 'large' ? 'navbar-expand-lg' : 'navbar-expand-lx',\r\n        this.position === 'top' ? 'fixed-top' :\r\n          this.position === 'bottom' ? 'fixed-bottom' : '',\r\n        this.scrolling ? 'scrolling-navbar' : ''\r\n      );\r\n    },\r\n    navStyles() {\r\n      return (\r\n        this.navStyle\r\n      );\r\n    }\r\n  },\r\n  methods: {\r\n    toggle() {\r\n      if (this.toggleClicked) {\r\n        this.collapse.classList.toggle('show-navbar');\r\n        this.collapse.classList.remove('hide-navbar');\r\n        this.collapse.classList.toggle('collapse');\r\n        this.collapse.style.overflow = 'hidden';\r\n        this.collapseOverflow = setTimeout(() => {\r\n          this.collapse.style.overflow = 'initial';\r\n        }, 300);\r\n        this.toggleClicked = false;\r\n      } else {\r\n        this.collapse.classList.add('hide-navbar');\r\n        this.collapse.classList.toggle('show-navbar');\r\n        this.collapse.style.overflow = 'hidden';\r\n        this.collapseOverflow = setTimeout(() => {\r\n          this.collapse.classList.toggle('collapse');\r\n          this.collapse.style.overflow = 'initial';\r\n        }, 300);\r\n        this.toggleClicked = true;\r\n      }\r\n    },\r\n    close() {\r\n      this.collapse.classList.add('hide-navbar');\r\n      this.collapse.classList.remove('show-navbar');\r\n      this.collapse.style.overflow = 'hidden';\r\n      this.collapseOverflow = setTimeout(() => {\r\n        this.collapse.classList.add('collapse');\r\n        this.collapse.style.overflow = 'initial';\r\n      }, 300);\r\n      this.toggleClicked = true;\r\n    },\r\n    handleScroll() {\r\n      if (this.scrolling) {\r\n        if (window.scrollY > 100 && this.scrolled === false) {\r\n          this.$el.style.paddingTop = 5 + 'px';\r\n          this.$el.style.paddingBottom = 5 + 'px';\r\n          if (this.transparent) this.$el.classList.add(`${this.color}-color`);\r\n          this.scrolled = true;\r\n        } else if (window.scrollY < 100 && this.scrolled === true) {\r\n          this.$el.style.paddingTop = 12 + 'px';\r\n          this.$el.style.paddingBottom = 12 + 'px';\r\n          if (this.transparent) this.$el.classList.remove(`${this.color}-color`);\r\n          this.scrolled = false;\r\n        }\r\n      }\r\n    },\r\n    onClick(e) {\r\n      if (e.target.classList.contains('navbar-toggler') || e.target.parentNode.classList.contains('navbar-toggler')) {\r\n        this.toggle();\r\n      } else if (this.toggleClicked === false) {\r\n        let target = e.target;\r\n        let body = document.getElementsByTagName('body')[0];\r\n        if (!target.classList.contains('navbar-link')) {\r\n          while (target !== body) {\r\n            if (target.classList.contains('navbar')) {\r\n              return;\r\n            }\r\n            target = target.parentNode;\r\n          }\r\n        }\r\n        this.close();\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    document.addEventListener('click', this.onClick);\r\n    this.collapse = this.$el.children.navbarSupportedContent;\r\n    this.collapse.classList.add('collapse');\r\n  },\r\n  created() {\r\n    window.addEventListener('scroll', this.handleScroll);\r\n  },\r\n  destroyed() {\r\n    document.removeEventListener('click', this.onClick);\r\n    window.removeEventListener('scroll', this.handleScroll);\r\n  }\r\n};\r\n\r\nexport default Navbar;\r\nexport { Navbar as mdbNavbar };\r\n</script>\r\n\r\n<style scoped>\r\n.scrolling-navbar {\r\n  transition: padding .5s;\r\n}\r\n.nav-item {\r\n  position: relative;\r\n}\r\n.navbar-toggler {\r\n  order: 1;\r\n}\r\n.navbar-collapse {\r\n  order: 2;\r\n}\r\n</style>\r\n"],"sourceRoot":"node_modules\\mdbvue\\src\\components"}]}